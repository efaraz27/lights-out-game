{"ast":null,"code":"import _slicedToArray from \"D:\\\\Web Projects\\\\lights-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Web Projects\\\\lights-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Web Projects\\\\lights-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Web Projects\\\\lights-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Web Projects\\\\lights-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Web Projects\\\\lights-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Web Projects\\\\lights-out-game\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.nrows; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x); //flip initial cell\n\n      flipCell(y, x - 1); //flip  left\n\n      flipCell(y, x + 1); //flip  right\n\n      flipCell(y - 1, x); //flip  below\n\n      flipCell(y + 1, x); //flip  above\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      }); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 14\n          }\n        }, \"You Won!\");\n      } // TODO\n      // make table board\n\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAround: function flipCellsAround() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 18\n            }\n          }));\n        };\n\n        for (var x = 0; x < this.props.nrows; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, tblBoard)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["D:/Web Projects/lights-out-game/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","push","Math","random","chanceLightStartsOn","coord","ncols","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for( let y=0; y < this.props.nrows; y++)\n    {\n      let row = [];\n      for( let x=0; x < this.props.nrows; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x);      //flip initial cell\n    flipCell(y,x-1);    //flip  left\n    flipCell(y,x+1);    //flip  right\n    flipCell(y-1,x);    //flip  below\n    flipCell(y+1,x);    //flip  above\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({board, hasWon});\n    // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    \n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n    if(this.state.hasWon){\n      return <h1>You Won!</h1>\n    }\n    // TODO\n\n    // make table board\n    let tblBoard = [];\n    for( let y=0; y < this.props.nrows; y++)\n    {\n      let row = [];\n      for( let x=0; x < this.props.nrows; x++){\n        let coord = `${y}-${x}`;\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} flipCellsAround = {()=> this.flipCellsAround(coord)}/>);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    } \n\n    return (\n      <div>\n        <div className=\"board-title\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>{tblBoard}</tbody>\n        </table>\n      </div>\n      \n    );\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}